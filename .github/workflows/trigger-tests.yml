name: Trigger Tests 16

on:
  pull_request:
    types: [closed, opened, synchronize, reopened]

jobs:
  setup:
    # only run when PR is merged
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      story_version: ${{ steps.set_vars.outputs.story_version }}
      devnet_version: ${{ steps.set_vars.outputs.devnet_version }}
      geth_version: ${{ steps.set_vars.outputs.geth_version }}
    steps:
      - name: Set Variables
        id: set_vars
        run: |
          devnet_version="internal-devnet"
          geth_version="v1.0.2"
          echo "devnet_version=$devnet_version" >> $GITHUB_OUTPUT
          echo "story_version=$(echo ${{ github.base_ref }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT

  show-setup-outputs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Show Outputs
        run: |
          echo "devnet_version: ${{ needs.setup.outputs.devnet_version }}"
          echo "story_version: ${{ needs.setup.outputs.story_version }}"
          echo "geth_version: ${{ needs.setup.outputs.geth_version }}"

  stop-test-nodes:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      workflow_id: ${{ steps.trigger.outputs.workflow_id }}
    steps:
      - name: Trigger and get workflow ID
        id: trigger
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            // Trigger the workflow in the target repository
            await github.rest.repos.createDispatchEvent({
              owner: 'jia57b',
              repo: 'test-node-launcher',
              event_type: 'stop-test-nodes'
            });
            
            console.log("Already trigger workflow, waiting...");
            // wait for 5 seconds to ensure the workflow is created
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // get the latest workflow run
            let runs = [];
            let attempts = 0;
            
            // try to get the latest workflow run
            while (runs.length === 0 && attempts < 10) {
              console.log(`try ${attempts + 1}/10 to get the latest workflow run...`);
              
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                event: 'repository_dispatch',
                per_page: 5
              });
              
              runs = workflowRuns.data.workflow_runs.filter(run => 
                run.created_at > new Date(Date.now() - 60000).toISOString() // get the runs created in the last 1 minute
              );
              
              if (runs.length === 0) {
                console.log("Not find the runs, retrying...");
                await new Promise(resolve => setTimeout(resolve, 3000));
              }
              
              attempts++;
            }
            
            if (runs.length > 0) {
              // get the latest run by created_at
              runs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              const workflowId = runs[0].id;
              console.log(`the latest workflow: ${workflowId}, name: ${runs[0].name}, event: ${runs[0].event}`);
              core.setOutput("workflow_id", workflowId);
            } else {
              core.setFailed("cannot find the latest workflow run");
            }

  wait-for-testnodes-stop:
    needs: stop-test-nodes
    runs-on: ubuntu-latest
    steps:
      - name: Waiting for workflow to complete
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            const workflowId = ${{ needs.stop-test-nodes.outputs.workflow_id }};
            let status = "queued";
            
            console.log(`Waiting ${workflowId} complete...`);
            
            while (status === "queued" || status === "in_progress") {
              await new Promise(resolve => setTimeout(resolve, 10000)); // checking every 10 seconds
              
              const { data } = await github.rest.actions.getWorkflowRun({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                run_id: workflowId
              });
              
              status = data.status;
              console.log(`workflow status: ${status} (${data.conclusion || 'running'})`);
              
              // if the workflow is completed but not success, set the action as failed
              if (status === "completed" && data.conclusion !== "success") {
                core.setFailed(`remote workflow result: ${data.conclusion}`);
                return;
              }
            }
            
            console.log("Remote workflow succeed!");

  # here is the trigger devnet reset
  
  # here is waiting for devnet reset

  start-test-nodes:
    needs: [setup, wait-for-testnodes-stop]  # Changed dependency - only depends on stop completion
    runs-on: ubuntu-latest
    outputs:
      workflow_id: ${{ steps.trigger.outputs.workflow_id }}  # Added output for workflow ID
    steps:
      - name: Trigger to start test nodes
        id: trigger  # Added ID to reference in outputs
        uses: actions/github-script@v6  # Changed to github-script for consistency
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            // Trigger the workflow in the target repository
            await github.rest.repos.createDispatchEvent({
              owner: 'jia57b',
              repo: 'test-node-launcher',
              event_type: 'start-test-nodes',
              client_payload: {
                story_version: "${{ needs.setup.outputs.story_version }}",
                geth_version: "${{ needs.setup.outputs.geth_version }}",
                trigger_tests: "false"
              }
            });
            
            console.log("Triggered start-nodes workflow, waiting...");
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // get the latest workflow run
            let runs = [];
            let attempts = 0;
            
            while (runs.length === 0 && attempts < 10) {
              console.log(`try ${attempts + 1}/10 to get the latest workflow run...`);
              
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                event: 'repository_dispatch',
                per_page: 5
              });
              
              runs = workflowRuns.data.workflow_runs.filter(run => 
                run.created_at > new Date(Date.now() - 60000).toISOString()
              );
              
              if (runs.length === 0) {
                console.log("Not find the runs, retrying...");
                await new Promise(resolve => setTimeout(resolve, 3000));
              }
              
              attempts++;
            }
            
            if (runs.length > 0) {
              runs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              const workflowId = runs[0].id;
              console.log(`the latest workflow: ${workflowId}, name: ${runs[0].name}, event: ${runs[0].event}`);
              core.setOutput("workflow_id", workflowId);
            } else {
              core.setFailed("cannot find the latest workflow run");
            }

  wait-for-testnodes-start:
    needs: start-test-nodes
    runs-on: ubuntu-latest
    continue-on-error: true # Continue even if the workflow fails
    steps:
      - name: Waiting for start workflow to complete
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            const workflowId = ${{ needs.start-test-nodes.outputs.workflow_id }};
            let status = "queued";
            let attempts = 0;
            const maxAttempts = 120; // 20 minutes timeout (120 * 10 seconds)
            
            console.log(`Waiting for node start workflow ${workflowId} to complete...`);
            
            while ((status === "queued" || status === "in_progress") && attempts < maxAttempts) {
              attempts++;
              await new Promise(resolve => setTimeout(resolve, 10000)); // checking every 10 seconds
              
              const { data } = await github.rest.actions.getWorkflowRun({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                run_id: workflowId
              });
              
              status = data.status;
              console.log(`Attempt ${attempts}/${maxAttempts}: start workflow status: ${status} (${data.conclusion || 'running'})`);
              
              if (status === "completed" && data.conclusion !== "success") {
                core.setFailed(`Remote start workflow completed but with result: ${data.conclusion}`);
                return;
              }
            }
            
            if (attempts >= maxAttempts) {
              console.log(`⚠️ WARNING: Waiting timeout after ${maxAttempts * 10} seconds. Proceeding anyway...`);
            }
            
            console.log("Remote node start workflow succeeded!");

  run-tests:
    needs: [setup, wait-for-testnodes-start]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Tests
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          repository: jia57b/l1-tests
          event-type: run-tests
          client-payload: |
            {
              "devnet_version": "${{ needs.setup.outputs.devnet_version }}",
              "deploy_report": "true"
            }

