name: Trigger Tests 16

on:
  pull_request:
    types: [closed, opened, synchronize, reopened]

jobs:
  setup:
    # only run when PR is merged
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      story_version: ${{ steps.set_vars.outputs.story_version }}
      devnet_version: ${{ steps.set_vars.outputs.devnet_version }}
    steps:
      - name: Set Variables
        id: set_vars
        run: |
          devnet_version="internal-devnet"
          echo "devnet_version=$devnet_version" >> $GITHUB_OUTPUT
          echo "story_version=$(echo ${{ github.base_ref }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT

  show-outputs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Show Outputs
        run: |
          echo "devnet_version: ${{ needs.setup.outputs.devnet_version }}"
          echo "story_version: ${{ needs.setup.outputs.story_version }}"

  stop-test-nodes:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      workflow_id: ${{ steps.trigger.outputs.workflow_id }}
    steps:
      - name: Trigger and get workflow ID
        id: trigger
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            // 触发目标工作流
            await github.rest.repos.createDispatchEvent({
              owner: 'jia57b',
              repo: 'test-node-launcher',
              event_type: 'stop-test-nodes',
              client_payload: {
                node_ip: "3.211.128.164,44.212.106.4"
              }
            });
            
            console.log("已触发工作流，等待几秒让工作流启动...");
            // 等待几秒，确保工作流有时间开始执行
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // 获取目标仓库最新的工作流运行
            let runs = [];
            let attempts = 0;
            
            // 轮询等待工作流出现在列表中
            while (runs.length === 0 && attempts < 10) {
              console.log(`尝试 ${attempts + 1}/10 获取最新工作流运行...`);
              
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                event: 'repository_dispatch',
                per_page: 5
              });
              
              runs = workflowRuns.data.workflow_runs.filter(run => 
                run.created_at > new Date(Date.now() - 60000).toISOString() // 获取最近1分钟内创建的
              );
              
              if (runs.length === 0) {
                console.log("未找到最近的工作流运行，等待3秒后重试...");
                await new Promise(resolve => setTimeout(resolve, 3000));
              }
              
              attempts++;
            }
            
            if (runs.length > 0) {
              // 按创建时间排序，获取最新的
              runs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              const workflowId = runs[0].id;
              console.log(`最新工作流运行ID: ${workflowId}, 名称: ${runs[0].name}, 事件: ${runs[0].event}`);
              core.setOutput("workflow_id", workflowId);
            } else {
              core.setFailed("无法获取工作流运行ID");
            }
  wait-for-workflow:
    needs: stop-test-nodes
    runs-on: ubuntu-latest
    steps:
      - name: 等待工作流完成
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          script: |
            const workflowId = ${{ needs.stop-test-nodes.outputs.workflow_id }};
            let status = "queued";
            
            console.log(`正在等待工作流 ${workflowId} 完成...`);
            
            while (status === "queued" || status === "in_progress") {
              await new Promise(resolve => setTimeout(resolve, 10000)); // 每10秒检查一次
              
              const { data } = await github.rest.actions.getWorkflowRun({
                owner: 'jia57b',
                repo: 'test-node-launcher',
                run_id: workflowId
              });
              
              status = data.status;
              console.log(`工作流状态: ${status} (${data.conclusion || 'running'})`);
              
              // 如果工作流失败，也结束等待但标记为失败
              if (status === "completed" && data.conclusion !== "success") {
                core.setFailed(`远程工作流完成但结果为: ${data.conclusion}`);
                return;
              }
            }
            
            console.log("远程工作流已成功完成!");

  run-tests:
    needs: wait-for-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Tests
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
          repository: jia57b/l1-tests
          event-type: run-tests
          client-payload: |
            {
              "devnet_version": "${{ needs.setup.outputs.devnet_version }}",
              "deploy_report": "true"
            }
  

  # stop-test-nodes:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger to stop test nodes
  #       uses: peter-evans/repository-dispatch@v3
  #       with:
  #         token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
  #         repository: jia57b/test-node-launcher
  #         event-type: stop-test-nodes

  # run-tests:
  #   needs: [setup, stop-test-nodes]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger Tests
  #       uses: peter-evans/repository-dispatch@v3
  #       with:
  #         token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
  #         repository: jia57b/l1-tests
  #         event-type: run-tests
  #         client-payload: |
  #           {
  #             "devnet_version": "${{ needs.setup.outputs.devnet_version }}",
  #             "deploy_report": "true"
  #           }

  # start-test-nodes:
  #   needs: [setup, stop-test-nodes]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger to start test nodes
  #       uses: peter-evans/repository-dispatch@v3
  #       with:
  #         token: ${{ secrets.PAT_FOR_WORKFLOW_DISPATCH }}
  #         repository: jia57b/test-node-launcher
  #         event-type: start-test-nodes
  #         client-payload: |
  #           {
  #             "story_version": "${{ needs.setup.outputs.story_version }}",
  #             "trigger_tests": "false"
  #           }
