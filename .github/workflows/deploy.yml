name: Install required dependencies and deploy

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write

jobs:
  # Add  timestamp
  Timestamp:
    uses: storyprotocol/gha-workflows/.github/workflows/reusable-timestamp.yml@main

  # Install required dependencies
  deploy:
    needs: Timestamp
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::478656756051:role/iac-max-role
          aws-region: us-west-1
          role-session-name: github-actions

      - name: Install jq
        run: |
          sudo apt-get install -y jq

      - name: Fetch the list of ec2 public IP addresses - validators
        run: |
          # Define the instance names in the desired order
          instance_names=("validator1" "validator2" "validator3" "validator4" "validator5" "validator6" "validator7" "validator8" "validator9" "validator10" "validator11" "validator12" "validator13" "validator14" "validator15")

          # Initialize an array to hold the sorted IPs
          sorted_ips=()

          # Loop through each instance name and fetch its public IP address
          for name in "${instance_names[@]}"; do
              echo "Fetching IP address for instance with name: $name"
              ip=$(aws ec2 describe-instances \
                  --region us-west-1 \
                  --filters "Name=tag:Name,Values=$name" "Name=instance-state-name,Values=running" \
                  --query "Reservations[*].Instances[*].PublicIpAddress" \
                  --output text)

              if [ -n "$ip" ]; then
                  sorted_ips+=("$ip")
              else
                  echo "No IP address found for instance with name: $name"
              fi
          done

          # Print the sorted IPs
          echo "Sorted IP addresses:"
          for ip in "${sorted_ips[@]}"; do
              echo "$ip"
          done

          # Save the sorted IPs to a file
          printf "%s\n" "${sorted_ips[@]}" > sorted_ips.txt

      - name: Fetch the list of ec2 public IP addresses - bootnodes
        run: |
          aws ec2 describe-instances \
            --region us-west-1 \
            --filters "Name=tag:Name,Values=iliad-bootnode" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text > bootnode_ips.txt

          echo "Bootnode IPs:"
          cat bootnode_ips.txt

      - name: Install ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEVNET_AWS_STG }}

      - name: Prepare the ansible inventory file
        run: |
          # Add the bootnode IPs to the inventory file
          echo "[bootnodes]" > inventory.ini
          tr '\t' '\n' < bootnode_ips.txt | awk '{print $0 " ansible_user=ec2-user"}' >> inventory.ini
          echo "[validators]" >> inventory.ini
          tr '\t' '\n' < sorted_ips.txt | awk '{print $0 " ansible_user=ec2-user"}' >> inventory.ini

          # Print the inventory file
          cat inventory.ini

      - name: Add EC2 instances to known_hosts
        run: |
          for ip in $(cat sorted_ips.txt); do
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
          done

          for ip in $(cat bootnode_ips.txt); do
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
          done

          cat ~/.ssh/known_hosts

      - name: Download iliad binary from s3://iliad-geth-binaries/iliad
        run: |
          aws s3 cp s3://iliad-geth-binaries/iliad ./client/iliad --quiet
          chmod +x ./client/iliad

      - name: Download geth client from s3://iliad-geth-binaries/geth
        run: |
          aws s3 cp s3://iliad-geth-binaries/geth ./client/geth --quiet
          chmod +x ./client/geth

      # # - name: Install Tendermint 0.37.0 on the GHA runner
      # #   run: |
      # #     curl -L -o tendermint_0.37.0-rc2_linux_amd64.tar.gz https://github.com/tendermint/tendermint/releases/download/v0.37.0-rc2/tendermint_0.37.0-rc2_linux_amd64.tar.gz
      # #     tar -xzf tendermint_0.37.0-rc2_linux_amd64.tar.gz
      # #     sudo mv tendermint /usr/local/bin/
      # #     sudo chmod +x /usr/local/bin/tendermint

      - name: Run the ansible playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i inventory.ini ./scripts/ansible/deploy.yml

      - name: Copy validator1 files to EC2 instance 1
        run: |
          # sorted_ips is an array of the public IP addresses of the EC2 instances
          scp -r ./validators/validator1/* ec2-user@$(sed -n '1p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator2 files to EC2 instance 2
        run: |
          scp -r ./validators/validator2/* ec2-user@$(sed -n '2p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator3 files to EC2 instance 3
        run: |
          scp -r ./validators/validator3/* ec2-user@$(sed -n '3p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator4 files to EC2 instance 4
        run: |
          scp -r ./validators/validator4/* ec2-user@$(sed -n '4p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator5 files to EC2 instance 5
        run: |
          # sorted_ips is an array of the public IP addresses of the EC2 instances
          scp -r ./validators/validator5/* ec2-user@$(sed -n '5p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator6 files to EC2 instance 6
        run: |
          scp -r ./validators/validator6/* ec2-user@$(sed -n '6p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator7 files to EC2 instance 7
        run: |
          scp -r ./validators/validator7/* ec2-user@$(sed -n '7p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator8 files to EC2 instance 8
        run: |
          scp -r ./validators/validator8/* ec2-user@$(sed -n '8p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator9 files to EC2 instance 9
        run: |
          scp -r ./validators/validator9/* ec2-user@$(sed -n '9p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator10 files to EC2 instance 10
        run: |
          scp -r ./validators/validator10/* ec2-user@$(sed -n '10p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator11 files to EC2 instance 11
        run: |
          scp -r ./validators/validator11/* ec2-user@$(sed -n '11p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator12 files to EC2 instance 12
        run: |
          scp -r ./validators/validator12/* ec2-user@$(sed -n '12p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator13 files to EC2 instance 13
        run: |
          scp -r ./validators/validator13/* ec2-user@$(sed -n '13p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator14 files to EC2 instance 14
        run: |
          scp -r ./validators/validator14/* ec2-user@$(sed -n '14p' sorted_ips.txt):/home/ec2-user/

      - name: Copy validator15 files to EC2 instance 15
        run: |
          scp -r ./validators/validator15/* ec2-user@$(sed -n '15p' sorted_ips.txt):/home/ec2-user/

      - name: Launch the GETH process on the bootnodes
        run: |
          echo "Launching geth process on the bootnodes"
          for ip in $(cat bootnode_ips.txt); do
            ssh -o StrictHostKeyChecking=no ec2-user@$ip "nohup geth --config /home/ec2-user/devnet/geth/config/geth.toml > /home/ec2-user/geth.log 2>&1 &"
          done

      - name: Launch the GETH process on the validators
        run: |
          echo "Launching geth process on the validators"
          for ip in $(cat sorted_ips.txt); do
            ssh -o StrictHostKeyChecking=no ec2-user@$ip "nohup geth --config /home/ec2-user/geth/config/geth.toml > /home/ec2-user/geth.log 2>&1 &"
          done

      - name: Launch the ILIAD process on the bootnodes
        run: |
          echo "Launching iliad process on the bootnodes"
          for ip in $(cat bootnode_ips.txt); do
            ssh -o StrictHostKeyChecking=no ec2-user@$ip "nohup iliad run --home /home/ec2-user/devnet/iliad > /home/ec2-user/iliad.log 2>&1 &"
          done

      - name: Launch the ILIAD process on the validators
        run: |
          echo "Launching iliad process on the validators"
          for ip in $(cat sorted_ips.txt); do
            ssh -o StrictHostKeyChecking=no ec2-user@$ip "nohup iliad run > /home/ec2-user/iliad.log 2>&1 &"
          done
