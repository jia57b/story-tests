// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IIPTokenStakingRedelegateParams is an auto generated low-level Go binding around an user-defined struct.
type IIPTokenStakingRedelegateParams struct {
	DelegatorUncmpPubkey []byte
	ValidatorSrcPubkey   []byte
	ValidatorDstPubkey   []byte
	Amount               *big.Int
}

// IPTokenStakingMetaData contains all meta data concerning the IPTokenStaking contract.
var IPTokenStakingMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_minStakeAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minUnstakeAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minRedelegateAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"stakingRounding\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_withdrawalAddressChangeInterval\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"defaultCommissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"defaultMaxCommissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"defaultMaxCommissionChangeRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEFAULT_COMMISSION_RATE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_MAX_COMMISSION_CHANGE_RATE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_MAX_COMMISSION_RATE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"STAKE_ROUNDING\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"acceptOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addOperator\",\"inputs\":[{\"name\":\"uncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createValidator\",\"inputs\":[{\"name\":\"validatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"moniker\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"commissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxCommissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxCommissionChangeRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"createValidatorOnBehalf\",\"inputs\":[{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"delegatorTotalStakes\",\"inputs\":[{\"name\":\"delegatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"stakedAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegatorValidatorStakes\",\"inputs\":[{\"name\":\"delegatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"stakedAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperators\",\"inputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minRedelegateAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minStakeAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minUnstakeAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"redelegate\",\"inputs\":[{\"name\":\"p\",\"type\":\"tuple\",\"internalType\":\"structIIPTokenStaking.RedelegateParams\",\"components\":[{\"name\":\"delegatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorSrcPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorDstPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"redelegateOnBehalf\",\"inputs\":[{\"name\":\"p\",\"type\":\"tuple\",\"internalType\":\"structIIPTokenStaking.RedelegateParams\",\"components\":[{\"name\":\"delegatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorSrcPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorDstPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeOperator\",\"inputs\":[{\"name\":\"uncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"roundedStakeAmount\",\"inputs\":[{\"name\":\"rawAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"remainder\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setMinRedelegateAmount\",\"inputs\":[{\"name\":\"newMinRedelegateAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinStakeAmount\",\"inputs\":[{\"name\":\"newMinStakeAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinUnstakeAmount\",\"inputs\":[{\"name\":\"newMinUnstakeAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setWithdrawalAddress\",\"inputs\":[{\"name\":\"delegatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"newWithdrawalAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setWithdrawalAddressChangeInterval\",\"inputs\":[{\"name\":\"newWithdrawalAddressChangeInterval\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stake\",\"inputs\":[{\"name\":\"delegatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"stakeOnBehalf\",\"inputs\":[{\"name\":\"delegatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unstake\",\"inputs\":[{\"name\":\"delegatorUncmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unstakeOnBehalf\",\"inputs\":[{\"name\":\"delegatorCmpPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"validatorMetadata\",\"inputs\":[{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"moniker\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"totalStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"commissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxCommissionRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxCommissionChangeRate\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawalAddressChange\",\"inputs\":[{\"name\":\"delegatorPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"lastChange\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawalAddressChangeInterval\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"CreateValidator\",\"inputs\":[{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"moniker\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"stakeAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"commissionRate\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"maxCommissionRate\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"maxCommissionChangeRate\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Deposit\",\"inputs\":[{\"name\":\"depositorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferStarted\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Redelegate\",\"inputs\":[{\"name\":\"depositorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"validatorSrcPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"validatorDstPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetWithdrawalAddress\",\"inputs\":[{\"name\":\"depositorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"executionAddress\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"depositorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"validatorPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x6101006040523480156200001257600080fd5b5060405162003a3338038062003a3383398101604081905262000035916200012d565b886001600160a01b0381166200006557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007081620000a5565b5060029790975560039590955560049390935560055560e05263ffffffff90811660805290811660a0521660c05250620001ca565b600180546001600160a01b0319169055620000c081620000c3565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805163ffffffff811681146200012857600080fd5b919050565b60008060008060008060008060006101208a8c0312156200014d57600080fd5b89516001600160a01b03811681146200016557600080fd5b8099505060208a0151975060408a0151965060608a0151955060808a0151945060a08a015193506200019a60c08b0162000113565b9250620001aa60e08b0162000113565b9150620001bb6101008b0162000113565b90509295985092959850929598565b60805160a05160c05160e0516137fe6200023560003960008181610585015281816110c001528181611cad01528181611eee0152611f960152600081816106cd0152610ae40152600081816102d00152610ac30152600081816105510152610aa001526137fe6000f3fe6080604052600436106101f95760003560e01c806386eec4a11161010d578063c24ae586116100a0578063eee5cead1161006f578063eee5cead14610652578063f188768414610672578063f2fde38b14610688578063fc2e5932146106a8578063fc56c2a2146106bb57600080fd5b8063c24ae586146105a7578063d2e1f5b8146105df578063e30c397814610614578063eb4af0451461063257600080fd5b80639855c8b5116100dc5780639855c8b5146104ff578063a1cb18461461051f578063b8db983e1461053f578063bda16b151461057357600080fd5b806386eec4a1146104755780638d3e1e41146104885780638da5cb5b146104ba5780638f37ec19146104ec57600080fd5b80635706750311610190578063715018a61161015f578063715018a6146103de578063787f82c8146103f357806379ba5097146104135780637b6e842c1461042857806383dffd6f1461044857600080fd5b806357067503146103505780635a69825d146103885780635d5ab9681461039e5780636ea3a228146103be57600080fd5b80632ebc6034116101cc5780632ebc6034146102be57806339ec4df91461030757806348903e381461031d57806353972c2a1461033057600080fd5b8063057b9296146101fe578063060ceab01461022057806317e42e12146102495780632d1e973e14610269575b600080fd5b34801561020a57600080fd5b5061021e610219366004612d1f565b6106ef565b005b34801561022c57600080fd5b5061023660055481565b6040519081526020015b60405180910390f35b34801561025557600080fd5b5061021e610264366004612d1f565b610854565b34801561027557600080fd5b50610236610284366004612e35565b8151602081840181018051600882529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b3480156102ca57600080fd5b506102f27f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610240565b34801561031357600080fd5b5061023660035481565b61021e61032b366004612e98565b6109a6565b34801561033c57600080fd5b5061021e61034b366004612ed9565b610b0e565b34801561035c57600080fd5b5061023661036b366004612f13565b805160208183018101805160078252928201919093012091525481565b34801561039457600080fd5b5061023660045481565b3480156103aa57600080fd5b5061021e6103b9366004612f4f565b610e2c565b3480156103ca57600080fd5b5061021e6103d9366004612fc2565b61104e565b3480156103ea57600080fd5b5061021e6110f5565b3480156103ff57600080fd5b5061021e61040e366004612d1f565b611109565b34801561041f57600080fd5b5061021e6113bf565b34801561043457600080fd5b5061021e610443366004612ed9565b611403565b34801561045457600080fd5b50610468610463366004612e98565b611753565b6040516102409190612fdb565b61021e610483366004613028565b611786565b34801561049457600080fd5b506104a86104a3366004612f13565b61199a565b604051610240969594939291906130e3565b3480156104c657600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610240565b61021e6104fa366004613028565b611a76565b34801561050b57600080fd5b5061021e61051a366004612fc2565b611c38565b34801561052b57600080fd5b5061021e61053a366004612f4f565b611ce2565b34801561054b57600080fd5b506102f27f000000000000000000000000000000000000000000000000000000000000000081565b34801561057f57600080fd5b506102367f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b357600080fd5b506102366105c2366004612f13565b8051602081830181018051600a8252928201919093012091525481565b3480156105eb57600080fd5b506105ff6105fa366004612fc2565b611ee6565b60408051928352602083019190915201610240565b34801561062057600080fd5b506001546001600160a01b03166104d4565b34801561063e57600080fd5b5061021e61064d366004612fc2565b611f26565b34801561065e57600080fd5b5061021e61066d366004612fc2565b611fcb565b34801561067e57600080fd5b5061023660025481565b34801561069457600080fd5b5061021e6106a336600461312b565b61204e565b61021e6106b636600461315a565b6120bf565b3480156106c757600080fd5b506102f27f000000000000000000000000000000000000000000000000000000000000000081565b8282336041821461071b5760405162461bcd60e51b8152600401610712906131fb565b60405180910390fd5b8282600081811061072e5761072e613240565b9050013560f81c60f81b6001600160f81b031916600460f81b146107645760405162461bcd60e51b815260040161071290613256565b806001600160a01b0316610778848461222d565b6001600160a01b03161461079e5760405162461bcd60e51b81526004016107129061329b565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e906107da908a908a90600401613312565b600060405180830381865af41580156107f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081f9190810190613326565b905061084a85600983604051610835919061339c565b9081526040519081900360200190209061225a565b5050505050505050565b828233604182146108775760405162461bcd60e51b8152600401610712906131fb565b8282600081811061088a5761088a613240565b9050013560f81c60f81b6001600160f81b031916600460f81b146108c05760405162461bcd60e51b815260040161071290613256565b806001600160a01b03166108d4848461222d565b6001600160a01b0316146108fa5760405162461bcd60e51b81526004016107129061329b565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e90610936908a908a90600401613312565b600060405180830381865af4158015610953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097b9190810190613326565b905061084a85600983604051610991919061339c565b9081526040519081900360200190209061226f565b8181602181146109c85760405162461bcd60e51b8152600401610712906131fb565b818160008181106109db576109db613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480610a29575081816000818110610a0e57610a0e613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b610a455760405162461bcd60e51b815260040161071290613256565b610b0884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260098152683b30b634b230ba37b960b91b602082015291507f000000000000000000000000000000000000000000000000000000000000000090507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612284565b50505050565b610b1881806133b8565b60418114610b385760405162461bcd60e51b8152600401610712906131fb565b81816000818110610b4b57610b4b613240565b9050013560f81c60f81b6001600160f81b031916600460f81b14610b815760405162461bcd60e51b815260040161071290613256565b610b8e60208401846133b8565b60218114610bae5760405162461bcd60e51b8152600401610712906131fb565b81816000818110610bc157610bc1613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480610c0f575081816000818110610bf457610bf4613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b610c2b5760405162461bcd60e51b815260040161071290613256565b60068282604051610c3d9291906133fe565b9081526040519081900360200190205460ff16610c6c5760405162461bcd60e51b81526004016107129061340e565b610c7960408601866133b8565b60218114610c995760405162461bcd60e51b8152600401610712906131fb565b81816000818110610cac57610cac613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480610cfa575081816000818110610cdf57610cdf613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b610d165760405162461bcd60e51b815260040161071290613256565b60068282604051610d289291906133fe565b9081526040519081900360200190205460ff16610d575760405162461bcd60e51b81526004016107129061340e565b600073__$070efe90de6222b6182e3f0710b89d2262$__636889b16e610d7d8a806133b8565b6040518363ffffffff1660e01b8152600401610d9a929190613312565b600060405180830381865af4158015610db7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ddf9190810190613326565b90506000610df08960600135611ee6565b509050610dfd82336124e6565b610e2182610e0e60208c018c6133b8565b610e1b60408e018e6133b8565b86612571565b505050505050505050565b84843360418214610e4f5760405162461bcd60e51b8152600401610712906131fb565b82826000818110610e6257610e62613240565b9050013560f81c60f81b6001600160f81b031916600460f81b14610e985760405162461bcd60e51b815260040161071290613256565b806001600160a01b0316610eac848461222d565b6001600160a01b031614610ed25760405162461bcd60e51b81526004016107129061329b565b858560218114610ef45760405162461bcd60e51b8152600401610712906131fb565b81816000818110610f0757610f07613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480610f55575081816000818110610f3a57610f3a613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b610f715760405162461bcd60e51b815260040161071290613256565b60068282604051610f839291906133fe565b9081526040519081900360200190205460ff16610fb25760405162461bcd60e51b81526004016107129061340e565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e90610fee908e908e90600401613312565b600060405180830381865af415801561100b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110339190810190613326565b9050611041818a8a8a61272f565b5050505050505050505050565b61105661288f565b600081116110bb5760405162461bcd60e51b815260206004820152602c60248201527f4950546f6b656e5374616b696e673a206d696e556e7374616b65416d6f756e7460448201526b02063616e6e6f7420626520360a41b6064820152608401610712565b6110e57f000000000000000000000000000000000000000000000000000000000000000082613456565b6110ef908261348e565b60035550565b6110fd61288f565b61110760006128bc565b565b8282336041821461112c5760405162461bcd60e51b8152600401610712906131fb565b8282600081811061113f5761113f613240565b9050013560f81c60f81b6001600160f81b031916600460f81b146111755760405162461bcd60e51b815260040161071290613256565b806001600160a01b0316611189848461222d565b6001600160a01b0316146111af5760405162461bcd60e51b81526004016107129061329b565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e906111eb908a908a90600401613312565b600060405180830381865af4158015611208573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112309190810190613326565b90506000600782604051611244919061339c565b908152602001604051809103902054116112b25760405162461bcd60e51b815260206004820152602960248201527f4950546f6b656e5374616b696e673a2044656c656761746f72206d7573742068604482015268617665207374616b6560b81b6064820152608401610712565b42600554600a836040516112c6919061339c565b9081526020016040518091039020546112df91906134a1565b106113485760405162461bcd60e51b815260206004820152603360248201527f4950546f6b656e5374616b696e673a205769746864726177616c20616464726560448201527239b99031b430b733b29031b7b7b616b237bbb760691b6064820152608401610712565b42600a82604051611359919061339c565b9081526020016040518091039020819055507f9f7f04f688298f474ed4c786abb29e0ca0173d70516d55d9eac515609b45fbca818660601b6bffffffffffffffffffffffff19166040516113ae9291906134b4565b60405180910390a150505050505050565b60015433906001600160a01b031681146113f75760405163118cdaa760e01b81526001600160a01b0382166004820152602401610712565b611400816128bc565b50565b61140d81806133b8565b336041821461142e5760405162461bcd60e51b8152600401610712906131fb565b8282600081811061144157611441613240565b9050013560f81c60f81b6001600160f81b031916600460f81b146114775760405162461bcd60e51b815260040161071290613256565b806001600160a01b031661148b848461222d565b6001600160a01b0316146114b15760405162461bcd60e51b81526004016107129061329b565b6114be60208501856133b8565b602181146114de5760405162461bcd60e51b8152600401610712906131fb565b818160008181106114f1576114f1613240565b9050013560f81c60f81b6001600160f81b031916600260f81b148061153f57508181600081811061152457611524613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b61155b5760405162461bcd60e51b815260040161071290613256565b6006828260405161156d9291906133fe565b9081526040519081900360200190205460ff1661159c5760405162461bcd60e51b81526004016107129061340e565b6115a960408701876133b8565b602181146115c95760405162461bcd60e51b8152600401610712906131fb565b818160008181106115dc576115dc613240565b9050013560f81c60f81b6001600160f81b031916600260f81b148061162a57508181600081811061160f5761160f613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b6116465760405162461bcd60e51b815260040161071290613256565b600682826040516116589291906133fe565b9081526040519081900360200190205460ff166116875760405162461bcd60e51b81526004016107129061340e565b60006116968960600135611ee6565b509050600073__$070efe90de6222b6182e3f0710b89d2262$__636889b16e6116bf8c806133b8565b6040518363ffffffff1660e01b81526004016116dc929190613312565b600060405180830381865af41580156116f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117219190810190613326565b90506117478161173460208d018d6133b8565b61174160408f018f6133b8565b87612571565b50505050505050505050565b606061177d6009848460405161176a9291906133fe565b90815260200160405180910390206128d5565b90505b92915050565b838333604182146117a95760405162461bcd60e51b8152600401610712906131fb565b828260008181106117bc576117bc613240565b9050013560f81c60f81b6001600160f81b031916600460f81b146117f25760405162461bcd60e51b815260040161071290613256565b806001600160a01b0316611806848461222d565b6001600160a01b03161461182c5760405162461bcd60e51b81526004016107129061329b565b84846021811461184e5760405162461bcd60e51b8152600401610712906131fb565b8181600081811061186157611861613240565b9050013560f81c60f81b6001600160f81b031916600260f81b14806118af57508181600081811061189457611894613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b6118cb5760405162461bcd60e51b815260040161071290613256565b600682826040516118dd9291906133fe565b9081526040519081900360200190205460ff1661190c5760405162461bcd60e51b81526004016107129061340e565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e90611948908d908d90600401613312565b600060405180830381865af4158015611965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198d9190810190613326565b90506117478189896128e9565b80516020818301810180516006825292820191909301209152805460018201805460ff90921692916119cb906134d6565b80601f01602080910402602001604051908101604052809291908181526020018280546119f7906134d6565b8015611a445780601f10611a1957610100808354040283529160200191611a44565b820191906000526020600020905b815481529060010190602001808311611a2757829003601f168201915b50505050600283015460039093015491929163ffffffff80821692506401000000008204811691600160401b90041686565b838360218114611a985760405162461bcd60e51b8152600401610712906131fb565b81816000818110611aab57611aab613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480611af9575081816000818110611ade57611ade613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b611b155760405162461bcd60e51b815260040161071290613256565b838360218114611b375760405162461bcd60e51b8152600401610712906131fb565b81816000818110611b4a57611b4a613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480611b98575081816000818110611b7d57611b7d613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b611bb45760405162461bcd60e51b815260040161071290613256565b60068282604051611bc69291906133fe565b9081526040519081900360200190205460ff16611bf55760405162461bcd60e51b81526004016107129061340e565b61084a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506128e99050565b611c4061288f565b60008111611ca85760405162461bcd60e51b815260206004820152602f60248201527f4950546f6b656e5374616b696e673a206d696e526564656c6567617465416d6f60448201526e0756e742063616e6e6f74206265203608c1b6064820152608401610712565b611cd27f000000000000000000000000000000000000000000000000000000000000000082613456565b611cdc908261348e565b60045550565b848460218114611d045760405162461bcd60e51b8152600401610712906131fb565b81816000818110611d1757611d17613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480611d65575081816000818110611d4a57611d4a613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b611d815760405162461bcd60e51b815260040161071290613256565b848460218114611da35760405162461bcd60e51b8152600401610712906131fb565b81816000818110611db657611db6613240565b9050013560f81c60f81b6001600160f81b031916600260f81b1480611e04575081816000818110611de957611de9613240565b9050013560f81c60f81b6001600160f81b031916600360f81b145b611e205760405162461bcd60e51b815260040161071290613256565b60068282604051611e329291906133fe565b9081526040519081900360200190205460ff16611e615760405162461bcd60e51b81526004016107129061340e565b611ea289898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152503392506124e6915050565b610e2189898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915089905061272f565b600080611f137f000000000000000000000000000000000000000000000000000000000000000084613456565b9050611f1f818461348e565b9150915091565b611f2e61288f565b60008111611f915760405162461bcd60e51b815260206004820152602a60248201527f4950546f6b656e5374616b696e673a206d696e5374616b65416d6f756e7420636044820152690616e6e6f7420626520360b41b6064820152608401610712565b611fbb7f000000000000000000000000000000000000000000000000000000000000000082613456565b611fc5908261348e565b60025550565b611fd361288f565b600081116120495760405162461bcd60e51b815260206004820152603e60248201527f4950546f6b656e5374616b696e673a206e65775769746864726177616c41646460448201527f726573734368616e6765496e74657276616c2063616e6e6f74206265203000006064820152608401610712565b600555565b61205661288f565b600180546001600160a01b0383166001600160a01b031990911681179091556120876000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b868633604182146120e25760405162461bcd60e51b8152600401610712906131fb565b828260008181106120f5576120f5613240565b9050013560f81c60f81b6001600160f81b031916600460f81b1461212b5760405162461bcd60e51b815260040161071290613256565b806001600160a01b031661213f848461222d565b6001600160a01b0316146121655760405162461bcd60e51b81526004016107129061329b565b604051633444d8b760e11b815260009073__$070efe90de6222b6182e3f0710b89d2262$__90636889b16e906121a1908e908e90600401613312565b600060405180830381865af41580156121be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121e69190810190613326565b9050611041818a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508a9050612284565b600061223c8260018186613510565b60405161224a9291906133fe565b6040519081900390209392505050565b600061177d836001600160a01b038416612a00565b600061177d836001600160a01b038416612a4f565b600685604051612294919061339c565b9081526040519081900360200190205460ff16156123055760405162461bcd60e51b815260206004820152602860248201527f4950546f6b656e5374616b696e673a2056616c696461746f7220616c72656164604482015267792065786973747360c01b6064820152608401610712565b60008061231134611ee6565b91509150600082116123355760405162461bcd60e51b81526004016107129061353a565b6040518060c001604052806001151581526020018781526020018381526020018663ffffffff1681526020018563ffffffff1681526020018463ffffffff16815250600688604051612387919061339c565b908152604051602091819003820190208251815460ff19169015151781559082015160018201906123b890826135cf565b506040828101516002830155606083015160039092018054608085015160a09095015163ffffffff908116600160401b026bffffffff0000000000000000199682166401000000000267ffffffffffffffff199093169190951617179390931691909117909155518290600790612430908a9061339c565b9081526020016040518091039020600082825461244d91906134a1565b9250508190555081600888604051612465919061339c565b908152602001604051809103902088604051612481919061339c565b9081526020016040518091039020600082825461249e91906134a1565b909155506124ad905081612b42565b7f5cecf4ee8b0c1d212b07dbc464fc303e4ffc458fd0f61135d4b9bf7f60197a188787848888886040516113ae9695949392919061368e565b61250f816009846040516124fa919061339c565b90815260405190819003602001902090612bed565b61256d5760405162461bcd60e51b815260206004820152602960248201527f4950546f6b656e5374616b696e673a2043616c6c6572206973206e6f7420616e6044820152681037b832b930ba37b960b91b6064820152608401610712565b5050565b80600887604051612582919061339c565b908152602001604051809103902086866040516125a09291906133fe565b90815260200160405180910390205410156125cd5760405162461bcd60e51b8152600401610712906136e1565b80600686866040516125e09291906133fe565b90815260200160405180910390206002016000828254612600919061348e565b92505081905550806006848460405161261a9291906133fe565b9081526020016040518091039020600201600082825461263a91906134a1565b9250508190555080600887604051612652919061339c565b908152602001604051809103902086866040516126709291906133fe565b9081526020016040518091039020600082825461268d919061348e565b92505081905550806008876040516126a5919061339c565b908152602001604051809103902084846040516126c39291906133fe565b908152602001604051809103902060008282546126e091906134a1565b90915550506040517fb025fa2a574dd306182c6ac63bf7b05482b99680c1b38a42d8401a0adfd3775a9061271f9088908890889088908890889061372b565b60405180910390a1505050505050565b80600885604051612740919061339c565b9081526020016040518091039020848460405161275e9291906133fe565b908152602001604051809103902054101561278b5760405162461bcd60e51b8152600401610712906136e1565b806006848460405161279e9291906133fe565b908152602001604051809103902060020160008282546127be919061348e565b92505081905550806007856040516127d6919061339c565b908152602001604051809103902060008282546127f3919061348e565b925050819055508060088560405161280b919061339c565b908152602001604051809103902084846040516128299291906133fe565b90815260200160405180910390206000828254612846919061348e565b90915550506040517f0526a04a9b113a046b17e2350e42123a2515b5558b3aea91576ccdb1270c1b599061288190869086908690869061377a565b60405180910390a150505050565b6000546001600160a01b031633146111075760405163118cdaa760e01b8152336004820152602401610712565b600180546001600160a01b031916905561140081612c0f565b606060006128e283612c5f565b9392505050565b6000806128f534611ee6565b9150915060025482101561291b5760405162461bcd60e51b81526004016107129061353a565b816006858560405161292e9291906133fe565b9081526040519081900360200181206002018054909201909155829060079061295890889061339c565b9081526040519081900360200181208054909201909155829060089061297f90889061339c565b9081526020016040518091039020858560405161299d9291906133fe565b908152604051908190036020019020805490910190556129bc81612b42565b7fe77f103965e0ff8836ce54ba9bac869f217cd5da27d6bdefd090282c397211c0858585856040516129f1949392919061377a565b60405180910390a15050505050565b6000818152600183016020526040812054612a4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611780565b506000611780565b60008181526001830160205260408120548015612b38576000612a7360018361348e565b8554909150600090612a879060019061348e565b9050808214612aec576000866000018281548110612aa757612aa7613240565b9060005260206000200154905080876000018481548110612aca57612aca613240565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612afd57612afd6137b2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611780565b6000915050611780565b604051600090339083908381818185875af1925050503d8060008114612b84576040519150601f19603f3d011682016040523d82523d6000602084013e612b89565b606091505b505090508061256d5760405162461bcd60e51b815260206004820152602a60248201527f4950546f6b656e5374616b696e673a204661696c656420746f20726566756e64604482015269103932b6b0b4b73232b960b11b6064820152608401610712565b6001600160a01b0381166000908152600183016020526040812054151561177d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612caf57602002820191906000526020600020905b815481526020019060010190808311612c9b575b50505050509050919050565b60008083601f840112612ccd57600080fd5b5081356001600160401b03811115612ce457600080fd5b602083019150836020828501011115612cfc57600080fd5b9250929050565b80356001600160a01b0381168114612d1a57600080fd5b919050565b600080600060408486031215612d3457600080fd5b83356001600160401b03811115612d4a57600080fd5b612d5686828701612cbb565b9094509250612d69905060208501612d03565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612db057612db0612d72565b604052919050565b60006001600160401b03821115612dd157612dd1612d72565b50601f01601f191660200190565b600082601f830112612df057600080fd5b8135612e03612dfe82612db8565b612d88565b818152846020838601011115612e1857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612e4857600080fd5b82356001600160401b0380821115612e5f57600080fd5b612e6b86838701612ddf565b93506020850135915080821115612e8157600080fd5b50612e8e85828601612ddf565b9150509250929050565b60008060208385031215612eab57600080fd5b82356001600160401b03811115612ec157600080fd5b612ecd85828601612cbb565b90969095509350505050565b600060208284031215612eeb57600080fd5b81356001600160401b03811115612f0157600080fd5b8201608081850312156128e257600080fd5b600060208284031215612f2557600080fd5b81356001600160401b03811115612f3b57600080fd5b612f4784828501612ddf565b949350505050565b600080600080600060608688031215612f6757600080fd5b85356001600160401b0380821115612f7e57600080fd5b612f8a89838a01612cbb565b90975095506020880135915080821115612fa357600080fd5b50612fb088828901612cbb565b96999598509660400135949350505050565b600060208284031215612fd457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561301c5783516001600160a01b031683529284019291840191600101612ff7565b50909695505050505050565b6000806000806040858703121561303e57600080fd5b84356001600160401b038082111561305557600080fd5b61306188838901612cbb565b9096509450602087013591508082111561307a57600080fd5b5061308787828801612cbb565b95989497509550505050565b60005b838110156130ae578181015183820152602001613096565b50506000910152565b600081518084526130cf816020860160208601613093565b601f01601f19169290920160200192915050565b861515815260c0602082015260006130fe60c08301886130b7565b60408301969096525063ffffffff9384166060820152918316608083015290911660a09091015292915050565b60006020828403121561313d57600080fd5b61177d82612d03565b803563ffffffff81168114612d1a57600080fd5b600080600080600080600060a0888a03121561317557600080fd5b87356001600160401b038082111561318c57600080fd5b6131988b838c01612cbb565b909950975060208a01359150808211156131b157600080fd5b506131be8a828b01612cbb565b90965094506131d1905060408901613146565b92506131df60608901613146565b91506131ed60808901613146565b905092959891949750929550565b60208082526025908201527f4950546f6b656e5374616b696e673a20496e76616c6964207075626b6579206c6040820152640cadccee8d60db1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f4950546f6b656e5374616b696e673a20496e76616c6964207075626b657920706040820152640e4caccd2f60db1b606082015260800190565b6020808252602e908201527f4950546f6b656e5374616b696e673a20496e76616c6964207075626b6579206460408201526d657269766564206164647265737360901b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000612f476020830184866132e9565b60006020828403121561333857600080fd5b81516001600160401b0381111561334e57600080fd5b8201601f8101841361335f57600080fd5b805161336d612dfe82612db8565b81815285602083850101111561338257600080fd5b613393826020830160208601613093565b95945050505050565b600082516133ae818460208701613093565b9190910192915050565b6000808335601e198436030181126133cf57600080fd5b8301803591506001600160401b038211156133e957600080fd5b602001915036819003821315612cfc57600080fd5b8183823760009101908152919050565b60208082526028908201527f4950546f6b656e5374616b696e673a2056616c696461746f7220646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b60008261347357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b8181038181111561178057611780613478565b8082018082111561178057611780613478565b6040815260006134c760408301856130b7565b90508260208301529392505050565b600181811c908216806134ea57607f821691505b60208210810361350a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808585111561352057600080fd5b8386111561352d57600080fd5b5050820193919092039150565b60208082526024908201527f4950546f6b656e5374616b696e673a205374616b6520616d6f756e7420746f6f604082015263206c6f7760e01b606082015260800190565b601f8211156135ca576000816000526020600020601f850160051c810160208610156135a75750805b601f850160051c820191505b818110156135c6578281556001016135b3565b5050505b505050565b81516001600160401b038111156135e8576135e8612d72565b6135fc816135f684546134d6565b8461357e565b602080601f83116001811461363157600084156136195750858301515b600019600386901b1c1916600185901b1785556135c6565b600085815260208120601f198616915b8281101561366057888601518255948401946001909101908401613641565b508582101561367e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c0815260006136a160c08301896130b7565b82810360208401526136b381896130b7565b6040840197909752505063ffffffff9384166060820152918316608083015290911660a09091015292915050565b6020808252602a908201527f4950546f6b656e5374616b696e673a20496e73756666696369656e74207374616040820152691ad95908185b5bdd5b9d60b21b606082015260800190565b60808152600061373e60808301896130b7565b828103602084015261375181888a6132e9565b905082810360408401526137668186886132e9565b915050826060830152979650505050505050565b60608152600061378d60608301876130b7565b82810360208401526137a08186886132e9565b91505082604083015295945050505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122083dcde7a9cf30ea3ab7c2343bd23f63567f097d7f7d8321e9d2d3ceeac76555264736f6c63430008180033",
}

// IPTokenStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use IPTokenStakingMetaData.ABI instead.
var IPTokenStakingABI = IPTokenStakingMetaData.ABI

// IPTokenStakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IPTokenStakingMetaData.Bin instead.
var IPTokenStakingBin = IPTokenStakingMetaData.Bin

// DeployIPTokenStaking deploys a new Ethereum contract, binding an instance of IPTokenStaking to it.
func DeployIPTokenStaking(auth *bind.TransactOpts, backend bind.ContractBackend, newOwner common.Address, _minStakeAmount *big.Int, _minUnstakeAmount *big.Int, _minRedelegateAmount *big.Int, stakingRounding *big.Int, _withdrawalAddressChangeInterval *big.Int, defaultCommissionRate uint32, defaultMaxCommissionRate uint32, defaultMaxCommissionChangeRate uint32) (common.Address, *types.Transaction, *IPTokenStaking, error) {
	parsed, err := IPTokenStakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IPTokenStakingBin), backend, newOwner, _minStakeAmount, _minUnstakeAmount, _minRedelegateAmount, stakingRounding, _withdrawalAddressChangeInterval, defaultCommissionRate, defaultMaxCommissionRate, defaultMaxCommissionChangeRate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IPTokenStaking{IPTokenStakingCaller: IPTokenStakingCaller{contract: contract}, IPTokenStakingTransactor: IPTokenStakingTransactor{contract: contract}, IPTokenStakingFilterer: IPTokenStakingFilterer{contract: contract}}, nil
}

// IPTokenStaking is an auto generated Go binding around an Ethereum contract.
type IPTokenStaking struct {
	IPTokenStakingCaller     // Read-only binding to the contract
	IPTokenStakingTransactor // Write-only binding to the contract
	IPTokenStakingFilterer   // Log filterer for contract events
}

// IPTokenStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type IPTokenStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPTokenStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IPTokenStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPTokenStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IPTokenStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPTokenStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IPTokenStakingSession struct {
	Contract     *IPTokenStaking   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IPTokenStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IPTokenStakingCallerSession struct {
	Contract *IPTokenStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IPTokenStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IPTokenStakingTransactorSession struct {
	Contract     *IPTokenStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IPTokenStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type IPTokenStakingRaw struct {
	Contract *IPTokenStaking // Generic contract binding to access the raw methods on
}

// IPTokenStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IPTokenStakingCallerRaw struct {
	Contract *IPTokenStakingCaller // Generic read-only contract binding to access the raw methods on
}

// IPTokenStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IPTokenStakingTransactorRaw struct {
	Contract *IPTokenStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPTokenStaking creates a new instance of IPTokenStaking, bound to a specific deployed contract.
func NewIPTokenStaking(address common.Address, backend bind.ContractBackend) (*IPTokenStaking, error) {
	contract, err := bindIPTokenStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPTokenStaking{IPTokenStakingCaller: IPTokenStakingCaller{contract: contract}, IPTokenStakingTransactor: IPTokenStakingTransactor{contract: contract}, IPTokenStakingFilterer: IPTokenStakingFilterer{contract: contract}}, nil
}

// NewIPTokenStakingCaller creates a new read-only instance of IPTokenStaking, bound to a specific deployed contract.
func NewIPTokenStakingCaller(address common.Address, caller bind.ContractCaller) (*IPTokenStakingCaller, error) {
	contract, err := bindIPTokenStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingCaller{contract: contract}, nil
}

// NewIPTokenStakingTransactor creates a new write-only instance of IPTokenStaking, bound to a specific deployed contract.
func NewIPTokenStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*IPTokenStakingTransactor, error) {
	contract, err := bindIPTokenStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingTransactor{contract: contract}, nil
}

// NewIPTokenStakingFilterer creates a new log filterer instance of IPTokenStaking, bound to a specific deployed contract.
func NewIPTokenStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*IPTokenStakingFilterer, error) {
	contract, err := bindIPTokenStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingFilterer{contract: contract}, nil
}

// bindIPTokenStaking binds a generic wrapper to an already deployed contract.
func bindIPTokenStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IPTokenStakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPTokenStaking *IPTokenStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPTokenStaking.Contract.IPTokenStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPTokenStaking *IPTokenStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.IPTokenStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPTokenStaking *IPTokenStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.IPTokenStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPTokenStaking *IPTokenStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPTokenStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPTokenStaking *IPTokenStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPTokenStaking *IPTokenStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTCOMMISSIONRATE is a free data retrieval call binding the contract method 0xb8db983e.
//
// Solidity: function DEFAULT_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCaller) DEFAULTCOMMISSIONRATE(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "DEFAULT_COMMISSION_RATE")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DEFAULTCOMMISSIONRATE is a free data retrieval call binding the contract method 0xb8db983e.
//
// Solidity: function DEFAULT_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingSession) DEFAULTCOMMISSIONRATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTCOMMISSIONRATE(&_IPTokenStaking.CallOpts)
}

// DEFAULTCOMMISSIONRATE is a free data retrieval call binding the contract method 0xb8db983e.
//
// Solidity: function DEFAULT_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCallerSession) DEFAULTCOMMISSIONRATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTCOMMISSIONRATE(&_IPTokenStaking.CallOpts)
}

// DEFAULTMAXCOMMISSIONCHANGERATE is a free data retrieval call binding the contract method 0xfc56c2a2.
//
// Solidity: function DEFAULT_MAX_COMMISSION_CHANGE_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCaller) DEFAULTMAXCOMMISSIONCHANGERATE(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "DEFAULT_MAX_COMMISSION_CHANGE_RATE")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DEFAULTMAXCOMMISSIONCHANGERATE is a free data retrieval call binding the contract method 0xfc56c2a2.
//
// Solidity: function DEFAULT_MAX_COMMISSION_CHANGE_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingSession) DEFAULTMAXCOMMISSIONCHANGERATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTMAXCOMMISSIONCHANGERATE(&_IPTokenStaking.CallOpts)
}

// DEFAULTMAXCOMMISSIONCHANGERATE is a free data retrieval call binding the contract method 0xfc56c2a2.
//
// Solidity: function DEFAULT_MAX_COMMISSION_CHANGE_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCallerSession) DEFAULTMAXCOMMISSIONCHANGERATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTMAXCOMMISSIONCHANGERATE(&_IPTokenStaking.CallOpts)
}

// DEFAULTMAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x2ebc6034.
//
// Solidity: function DEFAULT_MAX_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCaller) DEFAULTMAXCOMMISSIONRATE(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "DEFAULT_MAX_COMMISSION_RATE")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DEFAULTMAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x2ebc6034.
//
// Solidity: function DEFAULT_MAX_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingSession) DEFAULTMAXCOMMISSIONRATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTMAXCOMMISSIONRATE(&_IPTokenStaking.CallOpts)
}

// DEFAULTMAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x2ebc6034.
//
// Solidity: function DEFAULT_MAX_COMMISSION_RATE() view returns(uint32)
func (_IPTokenStaking *IPTokenStakingCallerSession) DEFAULTMAXCOMMISSIONRATE() (uint32, error) {
	return _IPTokenStaking.Contract.DEFAULTMAXCOMMISSIONRATE(&_IPTokenStaking.CallOpts)
}

// STAKEROUNDING is a free data retrieval call binding the contract method 0xbda16b15.
//
// Solidity: function STAKE_ROUNDING() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCaller) STAKEROUNDING(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "STAKE_ROUNDING")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKEROUNDING is a free data retrieval call binding the contract method 0xbda16b15.
//
// Solidity: function STAKE_ROUNDING() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingSession) STAKEROUNDING() (*big.Int, error) {
	return _IPTokenStaking.Contract.STAKEROUNDING(&_IPTokenStaking.CallOpts)
}

// STAKEROUNDING is a free data retrieval call binding the contract method 0xbda16b15.
//
// Solidity: function STAKE_ROUNDING() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCallerSession) STAKEROUNDING() (*big.Int, error) {
	return _IPTokenStaking.Contract.STAKEROUNDING(&_IPTokenStaking.CallOpts)
}

// DelegatorTotalStakes is a free data retrieval call binding the contract method 0x57067503.
//
// Solidity: function delegatorTotalStakes(bytes delegatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingCaller) DelegatorTotalStakes(opts *bind.CallOpts, delegatorPubkey []byte) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "delegatorTotalStakes", delegatorPubkey)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DelegatorTotalStakes is a free data retrieval call binding the contract method 0x57067503.
//
// Solidity: function delegatorTotalStakes(bytes delegatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingSession) DelegatorTotalStakes(delegatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.DelegatorTotalStakes(&_IPTokenStaking.CallOpts, delegatorPubkey)
}

// DelegatorTotalStakes is a free data retrieval call binding the contract method 0x57067503.
//
// Solidity: function delegatorTotalStakes(bytes delegatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingCallerSession) DelegatorTotalStakes(delegatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.DelegatorTotalStakes(&_IPTokenStaking.CallOpts, delegatorPubkey)
}

// DelegatorValidatorStakes is a free data retrieval call binding the contract method 0x2d1e973e.
//
// Solidity: function delegatorValidatorStakes(bytes delegatorPubkey, bytes validatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingCaller) DelegatorValidatorStakes(opts *bind.CallOpts, delegatorPubkey []byte, validatorPubkey []byte) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "delegatorValidatorStakes", delegatorPubkey, validatorPubkey)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DelegatorValidatorStakes is a free data retrieval call binding the contract method 0x2d1e973e.
//
// Solidity: function delegatorValidatorStakes(bytes delegatorPubkey, bytes validatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingSession) DelegatorValidatorStakes(delegatorPubkey []byte, validatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.DelegatorValidatorStakes(&_IPTokenStaking.CallOpts, delegatorPubkey, validatorPubkey)
}

// DelegatorValidatorStakes is a free data retrieval call binding the contract method 0x2d1e973e.
//
// Solidity: function delegatorValidatorStakes(bytes delegatorPubkey, bytes validatorPubkey) view returns(uint256 stakedAmount)
func (_IPTokenStaking *IPTokenStakingCallerSession) DelegatorValidatorStakes(delegatorPubkey []byte, validatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.DelegatorValidatorStakes(&_IPTokenStaking.CallOpts, delegatorPubkey, validatorPubkey)
}

// GetOperators is a free data retrieval call binding the contract method 0x83dffd6f.
//
// Solidity: function getOperators(bytes pubkey) view returns(address[])
func (_IPTokenStaking *IPTokenStakingCaller) GetOperators(opts *bind.CallOpts, pubkey []byte) ([]common.Address, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "getOperators", pubkey)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperators is a free data retrieval call binding the contract method 0x83dffd6f.
//
// Solidity: function getOperators(bytes pubkey) view returns(address[])
func (_IPTokenStaking *IPTokenStakingSession) GetOperators(pubkey []byte) ([]common.Address, error) {
	return _IPTokenStaking.Contract.GetOperators(&_IPTokenStaking.CallOpts, pubkey)
}

// GetOperators is a free data retrieval call binding the contract method 0x83dffd6f.
//
// Solidity: function getOperators(bytes pubkey) view returns(address[])
func (_IPTokenStaking *IPTokenStakingCallerSession) GetOperators(pubkey []byte) ([]common.Address, error) {
	return _IPTokenStaking.Contract.GetOperators(&_IPTokenStaking.CallOpts, pubkey)
}

// MinRedelegateAmount is a free data retrieval call binding the contract method 0x5a69825d.
//
// Solidity: function minRedelegateAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCaller) MinRedelegateAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "minRedelegateAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinRedelegateAmount is a free data retrieval call binding the contract method 0x5a69825d.
//
// Solidity: function minRedelegateAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingSession) MinRedelegateAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinRedelegateAmount(&_IPTokenStaking.CallOpts)
}

// MinRedelegateAmount is a free data retrieval call binding the contract method 0x5a69825d.
//
// Solidity: function minRedelegateAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCallerSession) MinRedelegateAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinRedelegateAmount(&_IPTokenStaking.CallOpts)
}

// MinStakeAmount is a free data retrieval call binding the contract method 0xf1887684.
//
// Solidity: function minStakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCaller) MinStakeAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "minStakeAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStakeAmount is a free data retrieval call binding the contract method 0xf1887684.
//
// Solidity: function minStakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingSession) MinStakeAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinStakeAmount(&_IPTokenStaking.CallOpts)
}

// MinStakeAmount is a free data retrieval call binding the contract method 0xf1887684.
//
// Solidity: function minStakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCallerSession) MinStakeAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinStakeAmount(&_IPTokenStaking.CallOpts)
}

// MinUnstakeAmount is a free data retrieval call binding the contract method 0x39ec4df9.
//
// Solidity: function minUnstakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCaller) MinUnstakeAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "minUnstakeAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinUnstakeAmount is a free data retrieval call binding the contract method 0x39ec4df9.
//
// Solidity: function minUnstakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingSession) MinUnstakeAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinUnstakeAmount(&_IPTokenStaking.CallOpts)
}

// MinUnstakeAmount is a free data retrieval call binding the contract method 0x39ec4df9.
//
// Solidity: function minUnstakeAmount() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCallerSession) MinUnstakeAmount() (*big.Int, error) {
	return _IPTokenStaking.Contract.MinUnstakeAmount(&_IPTokenStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IPTokenStaking *IPTokenStakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IPTokenStaking *IPTokenStakingSession) Owner() (common.Address, error) {
	return _IPTokenStaking.Contract.Owner(&_IPTokenStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IPTokenStaking *IPTokenStakingCallerSession) Owner() (common.Address, error) {
	return _IPTokenStaking.Contract.Owner(&_IPTokenStaking.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_IPTokenStaking *IPTokenStakingCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_IPTokenStaking *IPTokenStakingSession) PendingOwner() (common.Address, error) {
	return _IPTokenStaking.Contract.PendingOwner(&_IPTokenStaking.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_IPTokenStaking *IPTokenStakingCallerSession) PendingOwner() (common.Address, error) {
	return _IPTokenStaking.Contract.PendingOwner(&_IPTokenStaking.CallOpts)
}

// RoundedStakeAmount is a free data retrieval call binding the contract method 0xd2e1f5b8.
//
// Solidity: function roundedStakeAmount(uint256 rawAmount) view returns(uint256 amount, uint256 remainder)
func (_IPTokenStaking *IPTokenStakingCaller) RoundedStakeAmount(opts *bind.CallOpts, rawAmount *big.Int) (struct {
	Amount    *big.Int
	Remainder *big.Int
}, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "roundedStakeAmount", rawAmount)

	outstruct := new(struct {
		Amount    *big.Int
		Remainder *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Remainder = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoundedStakeAmount is a free data retrieval call binding the contract method 0xd2e1f5b8.
//
// Solidity: function roundedStakeAmount(uint256 rawAmount) view returns(uint256 amount, uint256 remainder)
func (_IPTokenStaking *IPTokenStakingSession) RoundedStakeAmount(rawAmount *big.Int) (struct {
	Amount    *big.Int
	Remainder *big.Int
}, error) {
	return _IPTokenStaking.Contract.RoundedStakeAmount(&_IPTokenStaking.CallOpts, rawAmount)
}

// RoundedStakeAmount is a free data retrieval call binding the contract method 0xd2e1f5b8.
//
// Solidity: function roundedStakeAmount(uint256 rawAmount) view returns(uint256 amount, uint256 remainder)
func (_IPTokenStaking *IPTokenStakingCallerSession) RoundedStakeAmount(rawAmount *big.Int) (struct {
	Amount    *big.Int
	Remainder *big.Int
}, error) {
	return _IPTokenStaking.Contract.RoundedStakeAmount(&_IPTokenStaking.CallOpts, rawAmount)
}

// ValidatorMetadata is a free data retrieval call binding the contract method 0x8d3e1e41.
//
// Solidity: function validatorMetadata(bytes validatorPubkey) view returns(bool exists, string moniker, uint256 totalStake, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingCaller) ValidatorMetadata(opts *bind.CallOpts, validatorPubkey []byte) (struct {
	Exists                  bool
	Moniker                 string
	TotalStake              *big.Int
	CommissionRate          uint32
	MaxCommissionRate       uint32
	MaxCommissionChangeRate uint32
}, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "validatorMetadata", validatorPubkey)

	outstruct := new(struct {
		Exists                  bool
		Moniker                 string
		TotalStake              *big.Int
		CommissionRate          uint32
		MaxCommissionRate       uint32
		MaxCommissionChangeRate uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Exists = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Moniker = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.TotalStake = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CommissionRate = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.MaxCommissionRate = *abi.ConvertType(out[4], new(uint32)).(*uint32)
	outstruct.MaxCommissionChangeRate = *abi.ConvertType(out[5], new(uint32)).(*uint32)

	return *outstruct, err

}

// ValidatorMetadata is a free data retrieval call binding the contract method 0x8d3e1e41.
//
// Solidity: function validatorMetadata(bytes validatorPubkey) view returns(bool exists, string moniker, uint256 totalStake, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingSession) ValidatorMetadata(validatorPubkey []byte) (struct {
	Exists                  bool
	Moniker                 string
	TotalStake              *big.Int
	CommissionRate          uint32
	MaxCommissionRate       uint32
	MaxCommissionChangeRate uint32
}, error) {
	return _IPTokenStaking.Contract.ValidatorMetadata(&_IPTokenStaking.CallOpts, validatorPubkey)
}

// ValidatorMetadata is a free data retrieval call binding the contract method 0x8d3e1e41.
//
// Solidity: function validatorMetadata(bytes validatorPubkey) view returns(bool exists, string moniker, uint256 totalStake, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingCallerSession) ValidatorMetadata(validatorPubkey []byte) (struct {
	Exists                  bool
	Moniker                 string
	TotalStake              *big.Int
	CommissionRate          uint32
	MaxCommissionRate       uint32
	MaxCommissionChangeRate uint32
}, error) {
	return _IPTokenStaking.Contract.ValidatorMetadata(&_IPTokenStaking.CallOpts, validatorPubkey)
}

// WithdrawalAddressChange is a free data retrieval call binding the contract method 0xc24ae586.
//
// Solidity: function withdrawalAddressChange(bytes delegatorPubkey) view returns(uint256 lastChange)
func (_IPTokenStaking *IPTokenStakingCaller) WithdrawalAddressChange(opts *bind.CallOpts, delegatorPubkey []byte) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "withdrawalAddressChange", delegatorPubkey)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalAddressChange is a free data retrieval call binding the contract method 0xc24ae586.
//
// Solidity: function withdrawalAddressChange(bytes delegatorPubkey) view returns(uint256 lastChange)
func (_IPTokenStaking *IPTokenStakingSession) WithdrawalAddressChange(delegatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.WithdrawalAddressChange(&_IPTokenStaking.CallOpts, delegatorPubkey)
}

// WithdrawalAddressChange is a free data retrieval call binding the contract method 0xc24ae586.
//
// Solidity: function withdrawalAddressChange(bytes delegatorPubkey) view returns(uint256 lastChange)
func (_IPTokenStaking *IPTokenStakingCallerSession) WithdrawalAddressChange(delegatorPubkey []byte) (*big.Int, error) {
	return _IPTokenStaking.Contract.WithdrawalAddressChange(&_IPTokenStaking.CallOpts, delegatorPubkey)
}

// WithdrawalAddressChangeInterval is a free data retrieval call binding the contract method 0x060ceab0.
//
// Solidity: function withdrawalAddressChangeInterval() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCaller) WithdrawalAddressChangeInterval(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPTokenStaking.contract.Call(opts, &out, "withdrawalAddressChangeInterval")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalAddressChangeInterval is a free data retrieval call binding the contract method 0x060ceab0.
//
// Solidity: function withdrawalAddressChangeInterval() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingSession) WithdrawalAddressChangeInterval() (*big.Int, error) {
	return _IPTokenStaking.Contract.WithdrawalAddressChangeInterval(&_IPTokenStaking.CallOpts)
}

// WithdrawalAddressChangeInterval is a free data retrieval call binding the contract method 0x060ceab0.
//
// Solidity: function withdrawalAddressChangeInterval() view returns(uint256)
func (_IPTokenStaking *IPTokenStakingCallerSession) WithdrawalAddressChangeInterval() (*big.Int, error) {
	return _IPTokenStaking.Contract.WithdrawalAddressChangeInterval(&_IPTokenStaking.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_IPTokenStaking *IPTokenStakingTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_IPTokenStaking *IPTokenStakingSession) AcceptOwnership() (*types.Transaction, error) {
	return _IPTokenStaking.Contract.AcceptOwnership(&_IPTokenStaking.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _IPTokenStaking.Contract.AcceptOwnership(&_IPTokenStaking.TransactOpts)
}

// AddOperator is a paid mutator transaction binding the contract method 0x057b9296.
//
// Solidity: function addOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) AddOperator(opts *bind.TransactOpts, uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "addOperator", uncmpPubkey, operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x057b9296.
//
// Solidity: function addOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingSession) AddOperator(uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.AddOperator(&_IPTokenStaking.TransactOpts, uncmpPubkey, operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x057b9296.
//
// Solidity: function addOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) AddOperator(uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.AddOperator(&_IPTokenStaking.TransactOpts, uncmpPubkey, operator)
}

// CreateValidator is a paid mutator transaction binding the contract method 0xfc2e5932.
//
// Solidity: function createValidator(bytes validatorUncmpPubkey, string moniker, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactor) CreateValidator(opts *bind.TransactOpts, validatorUncmpPubkey []byte, moniker string, commissionRate uint32, maxCommissionRate uint32, maxCommissionChangeRate uint32) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "createValidator", validatorUncmpPubkey, moniker, commissionRate, maxCommissionRate, maxCommissionChangeRate)
}

// CreateValidator is a paid mutator transaction binding the contract method 0xfc2e5932.
//
// Solidity: function createValidator(bytes validatorUncmpPubkey, string moniker, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate) payable returns()
func (_IPTokenStaking *IPTokenStakingSession) CreateValidator(validatorUncmpPubkey []byte, moniker string, commissionRate uint32, maxCommissionRate uint32, maxCommissionChangeRate uint32) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.CreateValidator(&_IPTokenStaking.TransactOpts, validatorUncmpPubkey, moniker, commissionRate, maxCommissionRate, maxCommissionChangeRate)
}

// CreateValidator is a paid mutator transaction binding the contract method 0xfc2e5932.
//
// Solidity: function createValidator(bytes validatorUncmpPubkey, string moniker, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) CreateValidator(validatorUncmpPubkey []byte, moniker string, commissionRate uint32, maxCommissionRate uint32, maxCommissionChangeRate uint32) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.CreateValidator(&_IPTokenStaking.TransactOpts, validatorUncmpPubkey, moniker, commissionRate, maxCommissionRate, maxCommissionChangeRate)
}

// CreateValidatorOnBehalf is a paid mutator transaction binding the contract method 0x48903e38.
//
// Solidity: function createValidatorOnBehalf(bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactor) CreateValidatorOnBehalf(opts *bind.TransactOpts, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "createValidatorOnBehalf", validatorPubkey)
}

// CreateValidatorOnBehalf is a paid mutator transaction binding the contract method 0x48903e38.
//
// Solidity: function createValidatorOnBehalf(bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingSession) CreateValidatorOnBehalf(validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.CreateValidatorOnBehalf(&_IPTokenStaking.TransactOpts, validatorPubkey)
}

// CreateValidatorOnBehalf is a paid mutator transaction binding the contract method 0x48903e38.
//
// Solidity: function createValidatorOnBehalf(bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) CreateValidatorOnBehalf(validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.CreateValidatorOnBehalf(&_IPTokenStaking.TransactOpts, validatorPubkey)
}

// Redelegate is a paid mutator transaction binding the contract method 0x7b6e842c.
//
// Solidity: function redelegate((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) Redelegate(opts *bind.TransactOpts, p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "redelegate", p)
}

// Redelegate is a paid mutator transaction binding the contract method 0x7b6e842c.
//
// Solidity: function redelegate((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingSession) Redelegate(p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Redelegate(&_IPTokenStaking.TransactOpts, p)
}

// Redelegate is a paid mutator transaction binding the contract method 0x7b6e842c.
//
// Solidity: function redelegate((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) Redelegate(p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Redelegate(&_IPTokenStaking.TransactOpts, p)
}

// RedelegateOnBehalf is a paid mutator transaction binding the contract method 0x53972c2a.
//
// Solidity: function redelegateOnBehalf((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) RedelegateOnBehalf(opts *bind.TransactOpts, p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "redelegateOnBehalf", p)
}

// RedelegateOnBehalf is a paid mutator transaction binding the contract method 0x53972c2a.
//
// Solidity: function redelegateOnBehalf((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingSession) RedelegateOnBehalf(p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RedelegateOnBehalf(&_IPTokenStaking.TransactOpts, p)
}

// RedelegateOnBehalf is a paid mutator transaction binding the contract method 0x53972c2a.
//
// Solidity: function redelegateOnBehalf((bytes,bytes,bytes,uint256) p) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) RedelegateOnBehalf(p IIPTokenStakingRedelegateParams) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RedelegateOnBehalf(&_IPTokenStaking.TransactOpts, p)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0x17e42e12.
//
// Solidity: function removeOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) RemoveOperator(opts *bind.TransactOpts, uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "removeOperator", uncmpPubkey, operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0x17e42e12.
//
// Solidity: function removeOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingSession) RemoveOperator(uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RemoveOperator(&_IPTokenStaking.TransactOpts, uncmpPubkey, operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0x17e42e12.
//
// Solidity: function removeOperator(bytes uncmpPubkey, address operator) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) RemoveOperator(uncmpPubkey []byte, operator common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RemoveOperator(&_IPTokenStaking.TransactOpts, uncmpPubkey, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IPTokenStaking *IPTokenStakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IPTokenStaking *IPTokenStakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RenounceOwnership(&_IPTokenStaking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IPTokenStaking.Contract.RenounceOwnership(&_IPTokenStaking.TransactOpts)
}

// SetMinRedelegateAmount is a paid mutator transaction binding the contract method 0x9855c8b5.
//
// Solidity: function setMinRedelegateAmount(uint256 newMinRedelegateAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) SetMinRedelegateAmount(opts *bind.TransactOpts, newMinRedelegateAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "setMinRedelegateAmount", newMinRedelegateAmount)
}

// SetMinRedelegateAmount is a paid mutator transaction binding the contract method 0x9855c8b5.
//
// Solidity: function setMinRedelegateAmount(uint256 newMinRedelegateAmount) returns()
func (_IPTokenStaking *IPTokenStakingSession) SetMinRedelegateAmount(newMinRedelegateAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinRedelegateAmount(&_IPTokenStaking.TransactOpts, newMinRedelegateAmount)
}

// SetMinRedelegateAmount is a paid mutator transaction binding the contract method 0x9855c8b5.
//
// Solidity: function setMinRedelegateAmount(uint256 newMinRedelegateAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) SetMinRedelegateAmount(newMinRedelegateAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinRedelegateAmount(&_IPTokenStaking.TransactOpts, newMinRedelegateAmount)
}

// SetMinStakeAmount is a paid mutator transaction binding the contract method 0xeb4af045.
//
// Solidity: function setMinStakeAmount(uint256 newMinStakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) SetMinStakeAmount(opts *bind.TransactOpts, newMinStakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "setMinStakeAmount", newMinStakeAmount)
}

// SetMinStakeAmount is a paid mutator transaction binding the contract method 0xeb4af045.
//
// Solidity: function setMinStakeAmount(uint256 newMinStakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingSession) SetMinStakeAmount(newMinStakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinStakeAmount(&_IPTokenStaking.TransactOpts, newMinStakeAmount)
}

// SetMinStakeAmount is a paid mutator transaction binding the contract method 0xeb4af045.
//
// Solidity: function setMinStakeAmount(uint256 newMinStakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) SetMinStakeAmount(newMinStakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinStakeAmount(&_IPTokenStaking.TransactOpts, newMinStakeAmount)
}

// SetMinUnstakeAmount is a paid mutator transaction binding the contract method 0x6ea3a228.
//
// Solidity: function setMinUnstakeAmount(uint256 newMinUnstakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) SetMinUnstakeAmount(opts *bind.TransactOpts, newMinUnstakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "setMinUnstakeAmount", newMinUnstakeAmount)
}

// SetMinUnstakeAmount is a paid mutator transaction binding the contract method 0x6ea3a228.
//
// Solidity: function setMinUnstakeAmount(uint256 newMinUnstakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingSession) SetMinUnstakeAmount(newMinUnstakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinUnstakeAmount(&_IPTokenStaking.TransactOpts, newMinUnstakeAmount)
}

// SetMinUnstakeAmount is a paid mutator transaction binding the contract method 0x6ea3a228.
//
// Solidity: function setMinUnstakeAmount(uint256 newMinUnstakeAmount) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) SetMinUnstakeAmount(newMinUnstakeAmount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetMinUnstakeAmount(&_IPTokenStaking.TransactOpts, newMinUnstakeAmount)
}

// SetWithdrawalAddress is a paid mutator transaction binding the contract method 0x787f82c8.
//
// Solidity: function setWithdrawalAddress(bytes delegatorUncmpPubkey, address newWithdrawalAddress) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) SetWithdrawalAddress(opts *bind.TransactOpts, delegatorUncmpPubkey []byte, newWithdrawalAddress common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "setWithdrawalAddress", delegatorUncmpPubkey, newWithdrawalAddress)
}

// SetWithdrawalAddress is a paid mutator transaction binding the contract method 0x787f82c8.
//
// Solidity: function setWithdrawalAddress(bytes delegatorUncmpPubkey, address newWithdrawalAddress) returns()
func (_IPTokenStaking *IPTokenStakingSession) SetWithdrawalAddress(delegatorUncmpPubkey []byte, newWithdrawalAddress common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetWithdrawalAddress(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, newWithdrawalAddress)
}

// SetWithdrawalAddress is a paid mutator transaction binding the contract method 0x787f82c8.
//
// Solidity: function setWithdrawalAddress(bytes delegatorUncmpPubkey, address newWithdrawalAddress) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) SetWithdrawalAddress(delegatorUncmpPubkey []byte, newWithdrawalAddress common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetWithdrawalAddress(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, newWithdrawalAddress)
}

// SetWithdrawalAddressChangeInterval is a paid mutator transaction binding the contract method 0xeee5cead.
//
// Solidity: function setWithdrawalAddressChangeInterval(uint256 newWithdrawalAddressChangeInterval) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) SetWithdrawalAddressChangeInterval(opts *bind.TransactOpts, newWithdrawalAddressChangeInterval *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "setWithdrawalAddressChangeInterval", newWithdrawalAddressChangeInterval)
}

// SetWithdrawalAddressChangeInterval is a paid mutator transaction binding the contract method 0xeee5cead.
//
// Solidity: function setWithdrawalAddressChangeInterval(uint256 newWithdrawalAddressChangeInterval) returns()
func (_IPTokenStaking *IPTokenStakingSession) SetWithdrawalAddressChangeInterval(newWithdrawalAddressChangeInterval *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetWithdrawalAddressChangeInterval(&_IPTokenStaking.TransactOpts, newWithdrawalAddressChangeInterval)
}

// SetWithdrawalAddressChangeInterval is a paid mutator transaction binding the contract method 0xeee5cead.
//
// Solidity: function setWithdrawalAddressChangeInterval(uint256 newWithdrawalAddressChangeInterval) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) SetWithdrawalAddressChangeInterval(newWithdrawalAddressChangeInterval *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.SetWithdrawalAddressChangeInterval(&_IPTokenStaking.TransactOpts, newWithdrawalAddressChangeInterval)
}

// Stake is a paid mutator transaction binding the contract method 0x86eec4a1.
//
// Solidity: function stake(bytes delegatorUncmpPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactor) Stake(opts *bind.TransactOpts, delegatorUncmpPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "stake", delegatorUncmpPubkey, validatorPubkey)
}

// Stake is a paid mutator transaction binding the contract method 0x86eec4a1.
//
// Solidity: function stake(bytes delegatorUncmpPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingSession) Stake(delegatorUncmpPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Stake(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, validatorPubkey)
}

// Stake is a paid mutator transaction binding the contract method 0x86eec4a1.
//
// Solidity: function stake(bytes delegatorUncmpPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) Stake(delegatorUncmpPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Stake(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, validatorPubkey)
}

// StakeOnBehalf is a paid mutator transaction binding the contract method 0x8f37ec19.
//
// Solidity: function stakeOnBehalf(bytes delegatorPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactor) StakeOnBehalf(opts *bind.TransactOpts, delegatorPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "stakeOnBehalf", delegatorPubkey, validatorPubkey)
}

// StakeOnBehalf is a paid mutator transaction binding the contract method 0x8f37ec19.
//
// Solidity: function stakeOnBehalf(bytes delegatorPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingSession) StakeOnBehalf(delegatorPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.StakeOnBehalf(&_IPTokenStaking.TransactOpts, delegatorPubkey, validatorPubkey)
}

// StakeOnBehalf is a paid mutator transaction binding the contract method 0x8f37ec19.
//
// Solidity: function stakeOnBehalf(bytes delegatorPubkey, bytes validatorPubkey) payable returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) StakeOnBehalf(delegatorPubkey []byte, validatorPubkey []byte) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.StakeOnBehalf(&_IPTokenStaking.TransactOpts, delegatorPubkey, validatorPubkey)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IPTokenStaking *IPTokenStakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.TransferOwnership(&_IPTokenStaking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.TransferOwnership(&_IPTokenStaking.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0x5d5ab968.
//
// Solidity: function unstake(bytes delegatorUncmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) Unstake(opts *bind.TransactOpts, delegatorUncmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "unstake", delegatorUncmpPubkey, validatorPubkey, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0x5d5ab968.
//
// Solidity: function unstake(bytes delegatorUncmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingSession) Unstake(delegatorUncmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Unstake(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, validatorPubkey, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0x5d5ab968.
//
// Solidity: function unstake(bytes delegatorUncmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) Unstake(delegatorUncmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.Unstake(&_IPTokenStaking.TransactOpts, delegatorUncmpPubkey, validatorPubkey, amount)
}

// UnstakeOnBehalf is a paid mutator transaction binding the contract method 0xa1cb1846.
//
// Solidity: function unstakeOnBehalf(bytes delegatorCmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingTransactor) UnstakeOnBehalf(opts *bind.TransactOpts, delegatorCmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.contract.Transact(opts, "unstakeOnBehalf", delegatorCmpPubkey, validatorPubkey, amount)
}

// UnstakeOnBehalf is a paid mutator transaction binding the contract method 0xa1cb1846.
//
// Solidity: function unstakeOnBehalf(bytes delegatorCmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingSession) UnstakeOnBehalf(delegatorCmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.UnstakeOnBehalf(&_IPTokenStaking.TransactOpts, delegatorCmpPubkey, validatorPubkey, amount)
}

// UnstakeOnBehalf is a paid mutator transaction binding the contract method 0xa1cb1846.
//
// Solidity: function unstakeOnBehalf(bytes delegatorCmpPubkey, bytes validatorPubkey, uint256 amount) returns()
func (_IPTokenStaking *IPTokenStakingTransactorSession) UnstakeOnBehalf(delegatorCmpPubkey []byte, validatorPubkey []byte, amount *big.Int) (*types.Transaction, error) {
	return _IPTokenStaking.Contract.UnstakeOnBehalf(&_IPTokenStaking.TransactOpts, delegatorCmpPubkey, validatorPubkey, amount)
}

// IPTokenStakingCreateValidatorIterator is returned from FilterCreateValidator and is used to iterate over the raw logs and unpacked data for CreateValidator events raised by the IPTokenStaking contract.
type IPTokenStakingCreateValidatorIterator struct {
	Event *IPTokenStakingCreateValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingCreateValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingCreateValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingCreateValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingCreateValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingCreateValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingCreateValidator represents a CreateValidator event raised by the IPTokenStaking contract.
type IPTokenStakingCreateValidator struct {
	ValidatorPubkey         []byte
	Moniker                 string
	StakeAmount             *big.Int
	CommissionRate          uint32
	MaxCommissionRate       uint32
	MaxCommissionChangeRate uint32
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterCreateValidator is a free log retrieval operation binding the contract event 0x5cecf4ee8b0c1d212b07dbc464fc303e4ffc458fd0f61135d4b9bf7f60197a18.
//
// Solidity: event CreateValidator(bytes validatorPubkey, string moniker, uint256 stakeAmount, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterCreateValidator(opts *bind.FilterOpts) (*IPTokenStakingCreateValidatorIterator, error) {

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "CreateValidator")
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingCreateValidatorIterator{contract: _IPTokenStaking.contract, event: "CreateValidator", logs: logs, sub: sub}, nil
}

// WatchCreateValidator is a free log subscription operation binding the contract event 0x5cecf4ee8b0c1d212b07dbc464fc303e4ffc458fd0f61135d4b9bf7f60197a18.
//
// Solidity: event CreateValidator(bytes validatorPubkey, string moniker, uint256 stakeAmount, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchCreateValidator(opts *bind.WatchOpts, sink chan<- *IPTokenStakingCreateValidator) (event.Subscription, error) {

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "CreateValidator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingCreateValidator)
				if err := _IPTokenStaking.contract.UnpackLog(event, "CreateValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateValidator is a log parse operation binding the contract event 0x5cecf4ee8b0c1d212b07dbc464fc303e4ffc458fd0f61135d4b9bf7f60197a18.
//
// Solidity: event CreateValidator(bytes validatorPubkey, string moniker, uint256 stakeAmount, uint32 commissionRate, uint32 maxCommissionRate, uint32 maxCommissionChangeRate)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseCreateValidator(log types.Log) (*IPTokenStakingCreateValidator, error) {
	event := new(IPTokenStakingCreateValidator)
	if err := _IPTokenStaking.contract.UnpackLog(event, "CreateValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the IPTokenStaking contract.
type IPTokenStakingDepositIterator struct {
	Event *IPTokenStakingDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingDeposit represents a Deposit event raised by the IPTokenStaking contract.
type IPTokenStakingDeposit struct {
	DepositorPubkey []byte
	ValidatorPubkey []byte
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe77f103965e0ff8836ce54ba9bac869f217cd5da27d6bdefd090282c397211c0.
//
// Solidity: event Deposit(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterDeposit(opts *bind.FilterOpts) (*IPTokenStakingDepositIterator, error) {

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingDepositIterator{contract: _IPTokenStaking.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe77f103965e0ff8836ce54ba9bac869f217cd5da27d6bdefd090282c397211c0.
//
// Solidity: event Deposit(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IPTokenStakingDeposit) (event.Subscription, error) {

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingDeposit)
				if err := _IPTokenStaking.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe77f103965e0ff8836ce54ba9bac869f217cd5da27d6bdefd090282c397211c0.
//
// Solidity: event Deposit(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseDeposit(log types.Log) (*IPTokenStakingDeposit, error) {
	event := new(IPTokenStakingDeposit)
	if err := _IPTokenStaking.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the IPTokenStaking contract.
type IPTokenStakingOwnershipTransferStartedIterator struct {
	Event *IPTokenStakingOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the IPTokenStaking contract.
type IPTokenStakingOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IPTokenStakingOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingOwnershipTransferStartedIterator{contract: _IPTokenStaking.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *IPTokenStakingOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingOwnershipTransferStarted)
				if err := _IPTokenStaking.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseOwnershipTransferStarted(log types.Log) (*IPTokenStakingOwnershipTransferStarted, error) {
	event := new(IPTokenStakingOwnershipTransferStarted)
	if err := _IPTokenStaking.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IPTokenStaking contract.
type IPTokenStakingOwnershipTransferredIterator struct {
	Event *IPTokenStakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingOwnershipTransferred represents a OwnershipTransferred event raised by the IPTokenStaking contract.
type IPTokenStakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IPTokenStakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingOwnershipTransferredIterator{contract: _IPTokenStaking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IPTokenStakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingOwnershipTransferred)
				if err := _IPTokenStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseOwnershipTransferred(log types.Log) (*IPTokenStakingOwnershipTransferred, error) {
	event := new(IPTokenStakingOwnershipTransferred)
	if err := _IPTokenStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingRedelegateIterator is returned from FilterRedelegate and is used to iterate over the raw logs and unpacked data for Redelegate events raised by the IPTokenStaking contract.
type IPTokenStakingRedelegateIterator struct {
	Event *IPTokenStakingRedelegate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingRedelegateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingRedelegate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingRedelegate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingRedelegateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingRedelegateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingRedelegate represents a Redelegate event raised by the IPTokenStaking contract.
type IPTokenStakingRedelegate struct {
	DepositorPubkey    []byte
	ValidatorSrcPubkey []byte
	ValidatorDstPubkey []byte
	Amount             *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRedelegate is a free log retrieval operation binding the contract event 0xb025fa2a574dd306182c6ac63bf7b05482b99680c1b38a42d8401a0adfd3775a.
//
// Solidity: event Redelegate(bytes depositorPubkey, bytes validatorSrcPubkey, bytes validatorDstPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterRedelegate(opts *bind.FilterOpts) (*IPTokenStakingRedelegateIterator, error) {

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "Redelegate")
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingRedelegateIterator{contract: _IPTokenStaking.contract, event: "Redelegate", logs: logs, sub: sub}, nil
}

// WatchRedelegate is a free log subscription operation binding the contract event 0xb025fa2a574dd306182c6ac63bf7b05482b99680c1b38a42d8401a0adfd3775a.
//
// Solidity: event Redelegate(bytes depositorPubkey, bytes validatorSrcPubkey, bytes validatorDstPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchRedelegate(opts *bind.WatchOpts, sink chan<- *IPTokenStakingRedelegate) (event.Subscription, error) {

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "Redelegate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingRedelegate)
				if err := _IPTokenStaking.contract.UnpackLog(event, "Redelegate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegate is a log parse operation binding the contract event 0xb025fa2a574dd306182c6ac63bf7b05482b99680c1b38a42d8401a0adfd3775a.
//
// Solidity: event Redelegate(bytes depositorPubkey, bytes validatorSrcPubkey, bytes validatorDstPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseRedelegate(log types.Log) (*IPTokenStakingRedelegate, error) {
	event := new(IPTokenStakingRedelegate)
	if err := _IPTokenStaking.contract.UnpackLog(event, "Redelegate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingSetWithdrawalAddressIterator is returned from FilterSetWithdrawalAddress and is used to iterate over the raw logs and unpacked data for SetWithdrawalAddress events raised by the IPTokenStaking contract.
type IPTokenStakingSetWithdrawalAddressIterator struct {
	Event *IPTokenStakingSetWithdrawalAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingSetWithdrawalAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingSetWithdrawalAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingSetWithdrawalAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingSetWithdrawalAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingSetWithdrawalAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingSetWithdrawalAddress represents a SetWithdrawalAddress event raised by the IPTokenStaking contract.
type IPTokenStakingSetWithdrawalAddress struct {
	DepositorPubkey  []byte
	ExecutionAddress [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSetWithdrawalAddress is a free log retrieval operation binding the contract event 0x9f7f04f688298f474ed4c786abb29e0ca0173d70516d55d9eac515609b45fbca.
//
// Solidity: event SetWithdrawalAddress(bytes depositorPubkey, bytes32 executionAddress)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterSetWithdrawalAddress(opts *bind.FilterOpts) (*IPTokenStakingSetWithdrawalAddressIterator, error) {

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "SetWithdrawalAddress")
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingSetWithdrawalAddressIterator{contract: _IPTokenStaking.contract, event: "SetWithdrawalAddress", logs: logs, sub: sub}, nil
}

// WatchSetWithdrawalAddress is a free log subscription operation binding the contract event 0x9f7f04f688298f474ed4c786abb29e0ca0173d70516d55d9eac515609b45fbca.
//
// Solidity: event SetWithdrawalAddress(bytes depositorPubkey, bytes32 executionAddress)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchSetWithdrawalAddress(opts *bind.WatchOpts, sink chan<- *IPTokenStakingSetWithdrawalAddress) (event.Subscription, error) {

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "SetWithdrawalAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingSetWithdrawalAddress)
				if err := _IPTokenStaking.contract.UnpackLog(event, "SetWithdrawalAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWithdrawalAddress is a log parse operation binding the contract event 0x9f7f04f688298f474ed4c786abb29e0ca0173d70516d55d9eac515609b45fbca.
//
// Solidity: event SetWithdrawalAddress(bytes depositorPubkey, bytes32 executionAddress)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseSetWithdrawalAddress(log types.Log) (*IPTokenStakingSetWithdrawalAddress, error) {
	event := new(IPTokenStakingSetWithdrawalAddress)
	if err := _IPTokenStaking.contract.UnpackLog(event, "SetWithdrawalAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPTokenStakingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the IPTokenStaking contract.
type IPTokenStakingWithdrawIterator struct {
	Event *IPTokenStakingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPTokenStakingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPTokenStakingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPTokenStakingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPTokenStakingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPTokenStakingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPTokenStakingWithdraw represents a Withdraw event raised by the IPTokenStaking contract.
type IPTokenStakingWithdraw struct {
	DepositorPubkey []byte
	ValidatorPubkey []byte
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x0526a04a9b113a046b17e2350e42123a2515b5558b3aea91576ccdb1270c1b59.
//
// Solidity: event Withdraw(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IPTokenStakingWithdrawIterator, error) {

	logs, sub, err := _IPTokenStaking.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IPTokenStakingWithdrawIterator{contract: _IPTokenStaking.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x0526a04a9b113a046b17e2350e42123a2515b5558b3aea91576ccdb1270c1b59.
//
// Solidity: event Withdraw(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IPTokenStakingWithdraw) (event.Subscription, error) {

	logs, sub, err := _IPTokenStaking.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPTokenStakingWithdraw)
				if err := _IPTokenStaking.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x0526a04a9b113a046b17e2350e42123a2515b5558b3aea91576ccdb1270c1b59.
//
// Solidity: event Withdraw(bytes depositorPubkey, bytes validatorPubkey, uint256 amount)
func (_IPTokenStaking *IPTokenStakingFilterer) ParseWithdraw(log types.Log) (*IPTokenStakingWithdraw, error) {
	event := new(IPTokenStakingWithdraw)
	if err := _IPTokenStaking.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
